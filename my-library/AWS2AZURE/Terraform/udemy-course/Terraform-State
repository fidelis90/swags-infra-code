- Terraform keeps the remote state of the infrastructure

- It stores it in a file called terraform.tfstate

- There is also a backup of the previous state in terraform.tfstate.backup

- when you execute terraform apply, a new terraform.tfstate and nbackup is written

- This is how terraform keeps track of the remote state
  - if the remote state changes, and you hit terraform apply again, terraform
    will  make changes to meet the correct remote state again.

  - if you terminate an instance that is managed by terraform, after terraform
    apply it will be started again.

- you can keep the terraform.tfstate file in git

- The terraform state can be saved remote, using the backend functionality in
  terraform

- The default is a local backend ( the terraform state file )

- other backends include:
  - s3 ( with a locking mechanism using dynamoDB )
  - Consul
  - terraform enterprise

- Using the backend functionality has definitely benefits:
   - Working as a team, it allows for collaboration, the remote state will
     always be available for the  whole team.

   -  The state file is not stored locally anymore, sensitive informations are
      now stored in the remote location.

   - some backends will allow remote operations, the terraform apply will run
     remote.

  - Using the remote state, avoids having to commit and push the .tfstate file
    to version control


***************** BACKENDS ******************************

- This defines where and how terraform operations are performed

- where state snapshots are stored.

- For beginners, it is recommended to use local backend, which requires no
  configuration.

- If the team is using terraform to manage meaningful infrastructure, it is recommended
  to use terraform cloud or enterprise or s3 or consul

BACKEND TYPES

- Enhanced:
   - performs both state storage and decide where operations are executed
    - there are two Enhanced backends: local and remote

- Standard:
   - This only stores state file, uses the local backend to store the state file
      locally



HOW TO CONFIGURE A REMOTE BACKEND

- Add the backend code to a .tf file
- Run the initialization process


CONSUL

- create a backend.tf file
  terraform {
    backend "consul" {
      address = "demo.consul.io" #hostname of the consul cluster
      path = "terraform/myproject" # where the state file will be stored
    }
  }

S3

- create a backemd.tf file
  terraform {
    backend "s3" {
      bucket = "mybucket"
      key = "terraform/myproject"
      region = "us-east-1"
    }
  }


- terraform init execution

- you can specify a read-only remote store directly in the .tf file

- When using s3 as a remote backend, it is recommended to enable versioning 
