-> Secrets manager is a service in aws that enable you to store secrets

-> the secrets can be used in your code, instead of hardcoding the secrets in the
   codes, with an API you retrieve the secret programmatically.

-> you can configure secrets to automatically rotate the secrets according to a specified
   rule.

For the Central DBA Team to access a cross account secret stored in secrets Manager
we can consider using any of the two options for authentication and access control

-> Cross-account assume role access using identity-based policies
-> Direct cross-account secret access using resource-based policies

***** DELEGATE ACCESS ACROSS AWS ACCOUNTS USING IAM ROLES ****

-> Development account (ID: 1111)
-> Production account (ID 9999): where app lives in s3 bucket

Steps
-> Create a role named UpdateApp in the prod account with a trust relationship
   with the dev account, with permissions to access the s3 bucket

-> The policy attached to the role to be able to access the s3 bucket is


{
"Version": "2012-10-17",
"Statement": [
  {
    "Effect": "Allow",
    "Action": "s3:ListAllMyBuckets",
    "Resource": "*"
  },
  {
    "Effect": "Allow",
    "Action": [
      "s3:ListBucket",
      "s3:GetBucketLocation"
     ],
    "Resource": "arn:aws:s3:::productionapp"
  },
  {
    "Effect": "Allow",
    "Action": [
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": "arn:aws:s3:::productionapp/*"
  }
]
}

-> Create the UpdateApp in the prod account

STEP 2

-> In the development account, create an inline policy

-> Choose the json tab
{
"Version": "2012-10-17",
"Statement": {
  "Effect": "Allow",
  "Action": "sts:AssumeRole",
  "Resource": "arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/UpdateApp"
}
}

-> Type a Policy name like allow-assume-S3-role-in-production.

-> Create the policy

STEP 3

After completing the first two steps of this tutorial, you have a role that
grants access to a resource in the Production account. You also have one user group
the Development account whose users are allowed to use that role. The role is
now ready to use.

-> You can have the following commands in a bash scripts to reuse
aws \
sts \
assume-role \
--role-arn "arn:aws:iam::<APPACCOUNTID>:role/DBA-Secret-Role" \
--role-session-name "<SessionIdentifier>"

-> we use the bash script to create a profile.

************ RESOURCE-BASED POLICY FOR DIRECTLY ACCESSING CROSS-ACCOUNT SECRETS MANAGER ****************

-> say you have a secret  in Account A
-> we need to access the secret in Account B


-> First create the secret and cmk in devops account

-> create a policy and attach it to the devops group in sso, so every user in that group
  will have use the policy.
  {
      "Version": "2012-10-17",
      "Statement": [
          {
              "Effect": "Allow",
              "Action": "secretsmanager:GetSecretValue",
              "Resource": "ARN of the Secret in Account A"
          },
          {
              "Effect": "Allow",
              "Action": "kms:Decrypt",
              "Resource":"ARN of the CMK in Account A"
          }
      ]
  }

-> Modify the policy on the cms in KMS in the devops account

{
   "Effect": "Allow",
   "Principal": {
       "AWS": "ARN of the group in Account B"
   },
   "Action": [
       "kms:Decrypt",
       "kms:DescribeKey"
   ],
   "Resource": "ARN of this CMK"
}

-> finally add this policy to the secrets in devops account

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "ARN of the group in Account B"
            },
            "Action": "secretsmanager:GetSecretValue",
            "Resource": "*"
        }
    ]
}

->
